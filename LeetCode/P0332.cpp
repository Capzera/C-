/*
问题描述：P0332
给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。
计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回?-1 。
你可以认为每种硬币的数量是无限的。
示例?1：
输入：coins = [1, 2, 5], amount = 11
输出：3 
解释：11 = 5 + 5 + 1
示例 2：
输入：coins = [2], amount = 3
输出：-1
示例 3：
输入：coins = [1], amount = 0
输出：0
提示：
* 1 <= coins.length <= 12
* 1 <= coins[i] <= 231 - 1
* 0 <= amount <= 104
*/
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        if (!amount) return 0;
        int n=coins.size();
        vector<int> dp(amount+1);
        sort(coins.begin(),coins.end());
        dp[0]=1;
        for(int i=1;i<=amount;i++)
        {
            dp[i]=INT_MAX;
            for (int j=0;j<n;j++)
            {
                if (coins[j]>i) break;
                if (!dp[i-coins[j]]) continue;
                if (i==coins[j]) dp[i]=1;
                else dp[i]=min(dp[i],dp[i-coins[j]]+1);
            }
            if (dp[i]==INT_MAX) dp[i]=0;
        }
        return dp[amount]? dp[amount]:-1;
    }
};