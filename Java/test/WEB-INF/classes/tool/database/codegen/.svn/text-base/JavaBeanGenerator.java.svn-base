/**
 * 项目名称：SanXine.com善行网，“打造国内有车一族的第一社区”
 * 版权申明：sanxine.com所有，未经许可不得在任何软件中以任何形式使用全部或部分代码，不得更改本项目的代码。
 * 文件名称：JavaBeanGenerator.java
 * 创建时间：2011-4-26-下午05:55:30
 * 创建用户：chis(chis123@qq.com)
 * 文件描述：
 * 修改记录：
 *   
 */
package tool.database.codegen;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowCallbackHandler;

import com.rapidweb2.common.util.StringUtil;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;

/**
 * 使用BeanMapper需要的JAVA BEAN自动生成器
 * 
 * @author chis(chis123@qq.com)
 */
public class JavaBeanGenerator {
	private static ApplicationContext	context;
	static {
		context = new ClassPathXmlApplicationContext("classpath:/tool/database/codegen/main.xml");
		((AbstractApplicationContext) context).registerShutdownHook(); // auto-destory single-bean. chis.
	}
	// ================================================================
	// 直接在这里设置要生成的参数
	private final static String			database_name  = "sxinfo";
	/** 要生成的表的匹配模式 */
	private final static String			table_pattern	= "SYS_%";
	/** 生成出来的JAVA BEAN对应的包 */
	private final static String			packageName		= "com.sanxine.sys.entity";
	/** 要生成的根目录 */
	private final static String			pathName		= "E:/workspaces/Sanxine.com/src/sns.core/";

	/** 文件的编码方式 */
	// private final static String encoding = "utf-8";

	// ================================================================

	/**
	 * 生成代码
	 * 
	 * @throws IOException
	 * @throws TemplateException
	 */
	@SuppressWarnings("deprecation")
	public void process() throws IOException, TemplateException {
		JdbcTemplate jt = (JdbcTemplate) context.getBean("jdbcTemplate");
		String sql = String.format("SELECT table_name,table_comment FROM TABLES WHERE table_schema='%s' and table_name like '%s'", database_name,table_pattern);

		final List<TableItem> tables = new ArrayList<TableItem>();

		// 找出表来
		jt.query(sql, new RowCallbackHandler() {

			@Override
			public void processRow(ResultSet rs) throws SQLException {
				TableItem item = new TableItem();
				item.name = rs.getString("TABLE_NAME");
				item.comment = rs.getString("TABLE_COMMENT");
				tables.add(item);
			}
		});
		// 为每一张表都找出列
		String sqlm = "SELECT column_name,data_type,character_maximum_length,column_comment,column_key,extra FROM COLUMNS WHERE table_schema='%s' and table_name = '%s' ORDER BY ordinal_position";
		for (final TableItem table : tables) {
			sql = String.format(sqlm, database_name,table.name);
			jt.query(sql, new RowCallbackHandler() {
				@Override
				public void processRow(ResultSet rs) throws SQLException {
					TableField item = new TableField();
					item.setName(rs.getString("COLUMN_NAME"));
					item.setComment(rs.getString("column_comment"));
					item.setDataType(rs.getString("data_type"));
					item.setKey(rs.getString("column_key"));
					item.setAutoInc(rs.getString("extra"));
					table.fields.add(item);
				}
			});
		}

		// 生成JAVA BEAN 吧

		Configuration cfg = new Configuration(); // 为FREEMARKER创建一个 Configuration 实例
		cfg.setDirectoryForTemplateLoading(new File("")); // 设置FreeMarker的模版文件位置
		Template t = cfg.getTemplate("/bin/tool/database/codegen/javabean.ftl");

		for (final TableItem table : tables) {
			Map<String, Object> ctx = new HashMap<String, Object>();
			ctx.put("packageName", packageName);
			ctx.put("beanCaption", table.comment);
			ctx.put("tableName", table.name);
			ctx.put("beanName", toBeanName(table.name));
			ctx.put("fields", table.fields);

			ctx.put("now", (new Date()).toLocaleString());
			OutputStream output = new FileOutputStream(getBeanPath(table.name));
			t.process(ctx, new OutputStreamWriter(output));
			System.out.println("-->由表" + table.name + "生成JavaBean:" + getBeanPath(table.name));
		}

	}

	// 转换为骆驼命名法的拼写方式
	private String toBeanName(String name) {
		return StringUtil.toCamelName(name);
	}

	// 生成的路径
	private String getBeanPath(String tableName) {
		String path = pathName + "/" + packageName.replace('.', '/');
		File f = new File(path);
		if (!f.exists()) f.mkdirs();
		return path + "/" + toBeanName(tableName) + ".java";
	}

	public static class TableItem {
		String					name;
		String					comment;
		final List<TableField>	fields	= new ArrayList<TableField>();
	}

	public static class TableField {
		final static Pattern	pattern	= Pattern.compile("列名：|备注[:：]");
		/** 物理名 */
		String					name;
		/** 转换过来的JAVA类型 */
		String					type;
		/** 全部的备注 */
		String					comment;
		/** 中文名 */
		String					caption;
		/** 是否主键 */
		boolean					key;
		/** 自动增长 */
		boolean					autoInc;									// auto_increment;

		/**
		 * 生成注解annotation
		 * 
		 * @return
		 */
		public String getAnnotation() {
			StringBuilder sb = new StringBuilder();
			if (this.key) sb.append("\r\n\t@Id");
			sb.append("\r\n\t").append("@Column(name=\"").append(name).append("\" ");
			sb.append(",insertable=").append(this.autoInc?"false":"true");
			sb.append(",updatable=").append((this.autoInc || this.key)?"false":"true");
			sb.append(")");
			return sb.toString();
		}

		public String getUname() {
			return StringUtil.capitalize(name);
		}

		/**
		 * @return 返回属性 name
		 */
		public String getName() {
			return name;
		}

		/**
		 * @return 返回属性 dataType
		 */
		public String getType() {
			return type;
		}

		/**
		 * @return 返回属性 comment
		 */
		public String getComment() {
			return comment==null?"":comment;
		}

		/**
		 * @return 返回属性 caption
		 */
		public String getCaption() {
			return caption==null?"":caption;
		}

		/**
		 * @return 返回属性 key
		 */
		public boolean isKey() {
			return key;
		}

		/**
		 * @param 将值name 设置为属性name
		 */
		public void setName(String name) {
			this.name = name;
		}

		/**
		 * @param 将值dataType 设置为属性dataType
		 */
		public void setDataType(String dataType) {
			type = dataTypeMap.get(dataType.toUpperCase());
			if (StringUtil.isBlank(type)) throw new RuntimeException("无法找到" + dataType + "对应的JAVA类型！");
		}

		/**
		 * @param 将值comment 设置为属性comment
		 */
		public void setComment(String comment) {
			if (StringUtil.isBlank(comment)) return;

			// 根据以前生成出来的数据结果进行解析，如：
			// 列名：用户状态 备注:‘1’ = 正常账户（默认） ‘0’ = 被禁用 ‘2’ = 等待验证（邮件）
			List<String> strs = new ArrayList<String>();
			for (String o : pattern.split(comment.trim())) {
				if (StringUtil.isBlank(o)) continue;
				strs.add(o);
			}
			if (strs.size() > 0) {
				this.caption = strs.get(0);
				this.comment = this.caption;
			}
			if (strs.size() > 1) this.comment = strs.get(1);
		}

		/**
		 * @param 将值key 设置为属性key
		 */
		public void setKey(String key) {
			this.key = "PRI".equals(key);
		}

		public void setAutoInc(String autoinc) {
			this.autoInc = "auto_increment".equalsIgnoreCase(autoinc);
		}
	}

	/** 结果集的映射 */
	private static final Map<String, String>	dataTypeMap	= new HashMap<String, String>();
	static {
		dataTypeMap.put("VARCHAR", "String");
		dataTypeMap.put("INT", "Integer");
		dataTypeMap.put("FLOAT", "Float");
		dataTypeMap.put("DOUBLE", "Double");
		dataTypeMap.put("DECIMAL", "Double");
		dataTypeMap.put("DATE", "java.sql.Date");
		dataTypeMap.put("DATETIME", "java.sql.Timestamp");
		dataTypeMap.put("TINYINT", "Integer");
		dataTypeMap.put("TIMESTAMP", "java.sql.Timestamp");
		dataTypeMap.put("CHAR", "String");
		dataTypeMap.put("BIT", "Boolean"); // 这样是不是所有布尔型的数据库都设计为：bit(1)？
		dataTypeMap.put("SMALLINT", "Integer");
		dataTypeMap.put("MEDIUMINT", "Integer");
		dataTypeMap.put("TEXT", "String");
		dataTypeMap.put("LONGTEXT", "String"); //
	}

	/**
	 * @param args
	 * @throws TemplateException
	 * @throws IOException
	 */
	public static void main(String[] args) throws IOException, TemplateException {

		(new JavaBeanGenerator()).process();
	}

}
