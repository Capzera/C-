/**
 * 项目名称：SanXine.com善行网，“打造国内有车一族的第一社区”
 * 版权申明：SanXine.com所有，未经许可不得在任何软件中以任何形式使用全部或部分代码，不得更改本项目的代码。
 * 文件名称：memcached.java
 * 创建时间：下午02:33:34
 * 创建用户：FLIN(flinsoft@163.com)
 * 文件描述：
 * 修改记录：
 *   
 */
package com.sanxine.memcached;

import java.util.Date;

import com.danga.MemCached.MemCachedClient;
import com.danga.MemCached.SockIOPool;

/**
 * @author FLIN
 * 
 */
public class MemCached {
	// 创建全局的唯一实例
	protected static MemCachedClient mcc = new MemCachedClient();

	protected static MemCached memCached = new MemCached();

	// 设置与缓存服务器的连接池，后面改成从配置文件读取...
	static {
		// 服务器列表和其权重
		String[] servers = { "127.0.0.1:11211" };
		Integer[] weights = { 3 };

		// 获取socke连接池的实例对象
		SockIOPool sockIOPool = SockIOPool.getInstance();

		// 设置服务器信息
		sockIOPool.setServers(servers);
		sockIOPool.setWeights(weights);

		// 设置初始连接数、最小和最大连接数以及最大处理时间
		sockIOPool.setInitConn(5);
		sockIOPool.setMinConn(5);
		sockIOPool.setMaxConn(250);
		sockIOPool.setMaxIdle(1000 * 60 * 60 * 6);

		// 设置主线程的睡眠时间
		sockIOPool.setMaintSleep(30);

		// 设置TCP的参数，连接超时等
		sockIOPool.setNagle(false);
		sockIOPool.setSocketTO(3000);
		sockIOPool.setSocketConnectTO(0);

		// 初始化连接池
		sockIOPool.initialize();
	}

	/**
	 * 保护型构造方法，不允许实例化！
	 */
	protected MemCached() {

	}

	/**
	 * 获取唯一实例.
	 */
	public static MemCached getInstance() {
		return memCached;
	}

	// 新增指定key的缓存内容，但不覆盖已存在的内容。
	public boolean add(String key, Object value) {
		return mcc.add(key, value);
	}

	// expiry过期时间
	public boolean add(String key, Object value, Date expiry) {
		return mcc.add(key, value, expiry);
	}

	// 新增或覆盖指定Key的缓存内容
	public boolean set(String key, Object value) {
		return mcc.set(key, value);
	}

	// lExpiry过期时间
	public boolean set(String key, Object value, long lExpiry) {
		return mcc.set(key, value, new Date(lExpiry));
	}

	// 根据指定的Key获取缓存内容
	public Object get(String key) {
		return mcc.get(key);
	}

	// 根据指定Key更新缓存内容
	public boolean replace(String key, Object value) {
		return mcc.replace(key, value);
	}

	// lExpiry 指定的时间
	public boolean replace(String key, Object value, long lExpiry) {
		return mcc.replace(key, value, new Date(lExpiry));
	}

	// 根据指定Key删除缓存内容
	public boolean delete(String key, Object value) {
		return mcc.delete(key);
	}

	// 根据指定Key在指定时间后删除缓存内容
	public boolean delete(String key, Object value, long lExpiry) {
		return mcc.delete(key, new Date(lExpiry));
	}

	// 检测Cache中当前Key是否存在
	public boolean exists(String key) {
		return mcc.keyExists(key);
	}
	
	// 清除
	public boolean flush() {
		return mcc.flushAll();
	}
}
