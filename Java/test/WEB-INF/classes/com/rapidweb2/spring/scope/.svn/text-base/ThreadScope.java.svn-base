/**
 * 代码来自：springbyexample.org
 */
package com.rapidweb2.spring.scope;

import java.util.Map;

import org.springframework.beans.factory.ObjectFactory;
import org.springframework.beans.factory.config.Scope;

/**
 * 实现自定义的thread的作用域bean<br>
 * 如果这个代码有问题，就直接使用spring3.0中的SimpleThreadScope吧 在配置中使用的例子为：<br/>
 * 
 * <pre>
 * 	<!-- 定义一格自定义的SCOPE：thread，线程级别的作用域 -->
 * <bean class="org.springframework.beans.factory.config.CustomScopeConfigurer"
 * 	scope="prototype">
 * 	<property name="scopes">
 * 		<map>
 * 			<entry key="thread">
 * 				<bean class="com.rapidweb2.common.spring.scope.ThreadScope" />
 * 			</entry>
 * 		</map>
 * 	</property>
 * </bean>
 * <!-- 定义线程级别的WEB上下文应用环境 ,注意：web.context名字不能被更改-->
 * <bean id="web.context" class="com.rapidweb2.web.WebContext" scope="thread" />
 * </pre>
 * 
 */
public class ThreadScope implements Scope {
	/**
	 * Gets bean from scope.
	 */
	public Object get(String name, ObjectFactory<?> factory) {
		Object result = null;

		Map<String, Object> hBeans = ThreadScopeContextHolder
				.currentThreadScopeAttributes().getBeanMap();

		if (!hBeans.containsKey(name)) {
			result = factory.getObject();
			hBeans.put(name, result);
		} else {
			result = hBeans.get(name);
		}

		return result;
	}

	/**
	 * Removes bean from scope.
	 */
	public Object remove(String name) {
		Object result = null;

		Map<String, Object> hBeans = ThreadScopeContextHolder
				.currentThreadScopeAttributes().getBeanMap();

		if (hBeans.containsKey(name)) {
			result = hBeans.get(name);

			hBeans.remove(name);
		}

		return result;
	}

	public void registerDestructionCallback(String name, Runnable callback) {
		ThreadScopeContextHolder.currentThreadScopeAttributes()
				.registerRequestDestructionCallback(name, callback);
	}

	public Object resolveContextualObject(String key) {
		return null;
	}

	public String getConversationId() {
		return Thread.currentThread().getName();
	}
}