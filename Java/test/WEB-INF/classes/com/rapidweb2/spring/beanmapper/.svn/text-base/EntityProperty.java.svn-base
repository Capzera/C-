/**
 * 项目名称：SanXine.com善行网，“打造国内有车一族的第一社区”
 * 版权申明：sanxine.com所有，未经许可不得在任何软件中以任何形式使用全部或部分代码，不得更改本项目的代码。
 * 文件名称：EntityProperty.java
 * 创建时间：2011-4-25-下午10:44:02
 * 创建用户：chis(chis123@qq.com)
 * 文件描述：
 * 修改记录：
 *   
 */
package com.rapidweb2.spring.beanmapper;

import java.lang.reflect.Method;

import com.rapidweb2.common.util.LogUtil;
import com.rapidweb2.db.DBException;

/**
 * 列属性
 * 
 * @author chis(chis123@qq.com)
 */
@SuppressWarnings("rawtypes")
public class EntityProperty {
	/** 属性名 */
	private String	propertyName;

	/** 列名(数据库的列名) */
	private String	colName;
	/** 对应的属性getter方法 */
	private Method	getter;
	/** 对应属性的setter方法 */
	private Method	setter;
	/** 属性是个枚举 */
	private Class	enumClass		= null;
	/** 是否可以用在insert中 */
	private boolean	insertable		= true;
	/** 是否可以用在update中 */
	private boolean	updateable		= true;


	/**
	 * 将值设置到对应的BEAN属性中
	 * 
	 * @param target
	 * @param value
	 */
	@SuppressWarnings("unchecked")
	public void setValue(Object target, Object value) {
		if (setter == null) return;
		// 如果是枚举则转义
		if (enumClass != null) value = Enum.valueOf(enumClass, (String) value);
		try {
			setter.invoke(target, value);
		}
		catch (Exception e) {
			LogUtil.warn(EntityProperty.class, e);
		}
	}

	/**
	 * 获得该属性对应的值
	 * 
	 * @param target
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	Object getValue(Object target) {
		Object r = null;
		try {
			r = getter.invoke(target);
		}
		catch (Exception e) {
			throw new DBException(e, "获得属性值错误");
		}
		return enumClass == null ? r : Enum.valueOf(enumClass, (String) r);
	}

	/**
	 * @return 返回属性 enumClass
	 */
	public Class getEnumClass() {
		return enumClass;
	}

	/**
	 * @param 将值enumClass 设置为属性enumClass
	 */
	public void setEnumClass(Class enumClass) {
		this.enumClass = enumClass;
	}

	/**
	 * @return 返回属性 insertable
	 */
	public boolean isInsertable() {
		return insertable;
	}

	/**
	 * @param 将值insertable 设置为属性insertable
	 */
	public void setInsertable(boolean insertable) {
		this.insertable = insertable;
	}

	/**
	 * @return 返回属性 updateable
	 */
	public boolean isUpdateable() {
		return updateable;
	}

	/**
	 * @param 将值updateable 设置为属性updateable
	 */
	public void setUpdateable(boolean updateable) {
		this.updateable = updateable;
	}

	/**
	 * @return 返回属性 propertyName
	 */
	public String getPropertyName() {
		return propertyName;
	}

	/**
	 * @param 将值propertyName 设置为属性propertyName
	 */
	public void setPropertyName(String propertyName) {
		this.propertyName = propertyName;
	}

	/**
	 * @return 返回属性 colName
	 */
	public String getColName() {
		return colName;
	}

	/**
	 * @param 将值colName 设置为属性colName
	 */
	public void setColName(String colName) {
		this.colName = colName;
	}

	/**
	 * @return 返回属性 getter
	 */
	public Method getGetter() {
		return getter;
	}

	/**
	 * @param 将值getter 设置为属性getter
	 */
	public void setGetter(Method getter) {
		this.getter = getter;
	}

	/**
	 * @return 返回属性 setter
	 */
	public Method getSetter() {
		return setter;
	}

	/**
	 * @param 将值setter 设置为属性setter
	 */
	public void setSetter(Method setter) {
		this.setter = setter;
	}

}
