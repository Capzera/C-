/**
 * 项目名称：SanXine.com善行网，“打造国内有车一族的第一社区”
 * 版权申明：sanxine.com所有，未经许可不得在任何软件中以任何形式使用全部或部分代码，不得更改本项目的代码。
 * 文件名称：Where.java
 * 创建时间：2011-4-30-下午02:13:40
 * 创建用户：chis(chis123@qq.com)
 * 文件描述：
 * 修改记录：
 *   
 */
package com.rapidweb2.spring.beanmapper;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.rapidweb2.common.util.StringUtil;

/**
 * 构造Where指令<br>
 * A = ? AND B=? OR C!=? AND ( A BETWEEN ? AND ? ) OR D like ? || 'ABC' .... <br/>
 * Where.of(Option.eq('A',v)).and(....)....and( Where.of(...)... ) 
 * 
 * 
 * @author chis(chis123@qq.com)
 */
public class Where {
	/** 保存SQL指令 */
	private final StringBuilder	sql			= new StringBuilder();
	/** 保存相应的参数 */
	private final List<Object>	arguments	= new ArrayList<Object>();

	/**
	 * 获得WHER条件语句的实例
	 * @param opt
	 * @return
	 */
	public static Where of( Option opt ){
		Where wh = new Where();
		wh.add(opt, "");
		return wh;
	}
	/**
	 * 获得WHERE条件语句的实例
	 * @param sql
	 * @param args
	 * @return
	 */
	public static Where of( String sql,Object...args ){
		Where wh = new Where();
		wh.add(sql,"",args);
		return wh;
	}
	/**
	 * 将其他的表示是作为子句AND嵌入（自动加括号）
	 * @param s
	 * @return
	 */
	public Where and( Where s ){
		if( s==null || s.sql.length()<1 ) return this;
		sql.append(" AND(").append(s.getSql()).append(") ");
		this.arguments.addAll(s.arguments);
		return this;
	}
	/**
	 * 将其他的表示是作为子句OR嵌入（自动加括号）
	 * @param s
	 * @return
	 */
	public Where or( Where s ){
		if( s==null || s.sql.length()<1 ) return this;
		sql.append(" OR(").append(s.getSql()).append(") ");
		this.arguments.addAll(s.arguments);
		return this;
	}
	/**
	 * 增加一个AND表达式
	 * @param opt
	 * @return
	 */
	public Where and(Option opt) {
		return add(opt,"AND");
	}
	/**
	 * 增加一个AND表达式
	 * @param sqlstr
	 * @param args
	 * @return
	 */
	public Where and( String sqlstr,Object...args ){
		return add( sqlstr,"AND",args );
	}
	/**
	 * 增加一个OR表达式
	 * @param opt
	 * @return
	 */
	public Where or( Option opt ){
		return add(opt,"OR");
	}
	/**
	 * 增加一个OR表达式
	 * @param sqlstr
	 * @param args
	 * @return
	 */
	public Where or( String sqlstr,Object...args ){
		return add( sqlstr,"OR",args );
	}
	/**
	 * 获得参数
	 * @return
	 */
	public List<Object> getArguments() {
		return arguments;
	}
	/**
	 * 获得相应的WHERE子句的表达式
	 * @return
	 */
	public String getSql(){
		return sql.toString();
	}
	
	private Where add( Option opt,String op ){
		if (opt != null) {
			if (sql.length() > 0) sql.append(" ").append(op).append(" ");
			sql.append(opt.optString);
			if (opt.arguments != null && opt.arguments.length > 0) arguments.addAll(Arrays.asList(opt.arguments));
		}
		return this;
	}
	private Where add( String sqlstr ,String op,Object...args ){
		if ( !StringUtil.isBlank(sqlstr) ) {
			if (sql.length() > 0) sql.append(" ").append(op).append(" ");
			sql.append("(").append(sqlstr).append(")");
			if (args != null && args.length > 0) arguments.addAll(Arrays.asList(args));
		}
		return this;
	}


	public static class Option {
		private String		optString;
		private Object[]	arguments;

		/**
		 * 获得相等的操作
		 * 
		 * @param fldName
		 * @param v
		 * @return
		 */
		public static Option eq(String fldName, Object v) {
			if (v == null) return null;
			Option opt = new Option();
			opt.optString = fldName + "=?";
			opt.arguments = new Object[] { v };
			return opt;
		}
		/**
		 * 不等于
		 * @param fldName
		 * @param v
		 * @return
		 */
		public static Option notEq(String fldName, Object v) {
			if (v == null) return null;
			Option opt = new Option();
			opt.optString = fldName + "!=?";
			opt.arguments = new Object[] { v };
			return opt;
		}
		/**
		 * 小于
		 * @param fldName
		 * @param v
		 * @return
		 */
		public static Option lt(String fldName, Object v) {
			if (v == null) return null;
			Option opt = new Option();
			opt.optString = fldName + "<?";
			opt.arguments = new Object[] { v };
			return opt;
		}
		/**
		 * 小于等于
		 * @param fldName
		 * @param v
		 * @return
		 */
		public static Option le(String fldName, Object v) {
			if (v == null) return null;
			Option opt = new Option();
			opt.optString = fldName + "<=?";
			opt.arguments = new Object[] { v };
			return opt;
		}
		/**
		 * 大于
		 * @param fldName
		 * @param v
		 * @return
		 */
		public static Option gt(String fldName, Object v) {
			if (v == null) return null;
			Option opt = new Option();
			opt.optString = fldName + ">?";
			opt.arguments = new Object[] { v };
			return opt;
		}
		/**
		 * 大于等于
		 * @param fldName
		 * @param v
		 * @return
		 */
		public static Option ge(String fldName, Object v) {
			if (v == null) return null;
			Option opt = new Option();
			opt.optString = fldName + ">=?";
			opt.arguments = new Object[] { v };
			return opt;
		}
		/**
		 * 非空
		 * @param fldName
		 * @return
		 */
		public static Option isNull(String fldName) {
			Option opt = new Option();
			opt.optString = fldName + " is null";
			opt.arguments = new Object[] {};
			return opt;
		}
		/**
		 * 等于空
		 * @param fldName
		 * @return
		 */
		public static Option isNotNull(String fldName) {
			Option opt = new Option();
			opt.optString = fldName + " is not null";
			opt.arguments = new Object[] {};
			return opt;
		}
		/**
		 * 在两值之间
		 * @param fldName
		 * @param min
		 * @param max
		 * @return
		 */
		public static Option between(String fldName, Object min, Object max) {
			if (min == null || max == null) return null;
			Option opt = new Option();
			opt.optString = "(" + fldName + " between ? and ? )";
			opt.arguments = new Object[] { min, max };
			return opt;
		}
		/**
		 * 字符串匹配
		 * @param fldName
		 * @param v	匹配模式串
		 * @return
		 */
		public static Option like(String fldName,String v){
			if( v==null ) return null;
			Option opt = new Option();
			opt.optString = fldName + " like ? ";
			opt.arguments = new Object[] { v };
			return opt;
		}
	}

}
