/**
 * 项目名称：RapidWeb2快速开发平台基础框架
 * 版权申明：RapidWeb2项目组，未经许可不得在任何软件中以任何形式使用全部或部分代码，不得更改本项目的代码。
 * 文件名称：ClassUtil.java
 * 创建时间：2010-12-1-下午06:26:10
 * 创建用户：chis(chis123@qq.com)
 * 文件描述：
 * 修改记录：
 *   
 */
package com.rapidweb2.common.util;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import com.rapidweb2.common.exception.Asserts;
import com.rapidweb2.common.exception.CommonException;
import com.rapidweb2.common.util.loop.ILoopIterator;

/**
 * @author chis(chis123@qq.com)
 *
 */
public class ClassUtil {

	/** 
	 * 根据名称装载类
	 * @param name
	 * @return
	 */
	public static Class<?> of( String name ){
		try {
			return  Class.forName(name);
		} catch(ClassNotFoundException e) {
			Asserts.illegalArgument("不存在或错误的类名：%s", name);
		}
		return null;
	}

	/**
	 * 获得类的实例
	 * @param <T>
	 * @param str
	 * @return
	 * @throws CommonException
	 */
	@SuppressWarnings("unchecked")
	public static <T> T newInstance(String str) throws CommonException {
		try {
			return (T) Class.forName(str).newInstance();
		} catch (Exception e) {
			throw new CommonException(e);
		}
	}

	/**
	 * 获得类的实例
	 * @param <T>
	 * @param t
	 * @return
	 * @throws CommonException
	 */
	public static <T> T newInstance(Class<T> t) throws CommonException {
		if(t==null) return null;
		try {
			return t.newInstance();
		} catch (Exception e) {
			throw new CommonException(e);
		}
	}
	/**
	 * 获得所有类的PUBLIC类型的方法，包含基类
	 * @param t
	 * @return
	 */
	public static Method[] getMethods(Class<?> t){
		return t.getMethods();
	}
	/**
	 * 找到所有名字为methodName的方法（多态）
	 * @param t
	 * @param methodName
	 * @return
	 */
	public static List<Method> getMethods(Class<?> clazz,String methodName){
		List<Method> methods = new ArrayList<Method>();
		
		if( clazz!=null ){ 
			for(  Method m : getMethods(clazz) )
				if( m.getName().equals(methodName) ) methods.add(m);
		}
		return methods;
	}
	
	/**
	 * 
	 * @param clazz
	 */
	public static void walkOverMethods( Class<?> clazz,ILoopIterator<Method> loopitem  ){
		if( clazz==null || loopitem==null ) return ;
		int i=0;
		for(  Method m : getMethods(clazz) ){
			if( !loopitem.process(m, i) ) break;
			i++;
		}
	}
	
	/**
	 * 反射执行方法，并返回值
	 * @param clz
	 * @param method
	 * @param params
	 * @return
	 */
	public static Object invoke(Class<?> clz,Method method,Object[] params){
		try {
			return method.invoke(clz.newInstance(), params);
		} catch(Throwable e) {
			e.printStackTrace();
			throw new RuntimeException(e.getMessage());
		}

	}
	
	/**
	 * 按照猜测法进行猜测类名，如果正确返回类，否则返回null
	 * @param <T>
	 * @param packageNames
	 * @param name
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static <T> Class<T> guestClassByName( String[] packageNames ,String name ){
		Class<T> clz = null;
		// 第一次猜测，同名
		for( String p:packageNames ){
			try {
				clz = (Class<T>) Class.forName( p+"."+name );
				return clz;
			} catch(ClassNotFoundException e) {
			}
		}
		// 第二次猜测：首字母转为大写
		for( String p:packageNames ){
			try {
				clz = (Class<T>) Class.forName( p+"."+ StringUtil.capitalize(name) );
				return clz;
			} catch(ClassNotFoundException e) {
			}
		}
		// 第三次猜测，遇到“_”变成骆驼命名法
		for( String p:packageNames ){
			try {
				clz = (Class<T>) Class.forName( p+"."+ StringUtil.toCamelName(name) );
				return clz;
			} catch(ClassNotFoundException e) {
			}
		}
		return null;
	}

}
