package com.rapidweb2.common.util;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.rapidweb2.common.exception.CommonException;
import com.rapidweb2.common.util.loop.ILoopIterator;

/**
 * 字符串工具类
 */
public class StringUtil {

	public static final String	EMPTY			= "";

	public static final int		INDEX_NOT_FOUND	= -1;

	/**
	 * 给已有的URL地址加上参数
	 * 
	 * @param url
	 * @param params
	 * @return
	 */
	public static String addUrlParameter( String url,List<Parameter<String,String>> params ){
		if( params==null || params.size()<1 ) return url;
		String[] s= url.split("\\?");
		String uri = s[0]; 
		String qry = s.length>1 ? s[1]:"";
		
		for( Parameter<String,String> o : params )
			qry = o.getKey() + "=" + StringUtil.enCodeURL(o.getValue(), "UTF-8") + "&" + qry;
		
		return uri + "?" + qry;
	}

	/**
	 * 将首字母设置成大写
	 * @param str
	 * @return
	 */
	public static String capitalize(String str) {
		int strLen;
		if (str == null || (strLen = str.length()) == 0) { return str; }
		return new StringBuffer(strLen).append(Character.toTitleCase(str.charAt(0))).append(str.substring(1)).toString();
	}
	/**
	 * 将字符串按照骆驼命名法转换为类名称
	 * @param str
	 * @return
	 */
	public static String toCamelName( String str ){
		if( StringUtil.isBlank( str ) ) return str;
		StringBuilder sb = new StringBuilder();
		for( String s : str.trim().split("_") ){
			sb.append( Character.toTitleCase(s.charAt(0)) ).append( s.substring(1) );
		}
		return sb.toString();
	}
	
	/*
	 * 是否包含子串
	 */
	public static boolean contains(String str, char searchChar) {
		if (isEmpty(str)) return false;
		return str.indexOf(searchChar) >= 0;
	}
	
	/**
	 * 如果字符串为空或者没有内容，则替换成默认的字符串
	 * 
	 * @param str 要处理的字符串
	 * @param defaultStr 默认字符串
	 * @return 结果字符串
	 */
	public static String empty(String str, String defaultStr) {
		return str == null || str.length() < 1 ? defaultStr : str;
	}

	/**
	 * 将字符串按照HTML规则来编码，剔除HTML中被保留而要求转义的数据
	 * @param input
	 * @return
	 */
    public static String encodeHTML(String input) {
    	if( input==null ) return "";
        int size = input.length();
        StringBuffer buffer = new StringBuffer(size);
        for (int i = 0; i < size; i++ ) {
            char c = input.charAt(i);
            switch (c) {
                case '<':
                    buffer.append("&lt;");
                    break;
                case '>':
                    buffer.append("&gt;");
                    break;
                case '"':
                    buffer.append("&quot;");
                    break;
                default:
                    buffer.append(c);
            }
        }
        return buffer.toString();
    }

	/* 转换为JS里面的字符串 */
	public static String encodeInString(String o) {
		return o==null ? null: o.replaceAll("\\\\", "\\\\\\\\").replaceAll("\\\"", "\\\\\"").replaceAll("'", "\\\\\'").replace("\n", "\\n").replace("\r", "\\r");

	}
	
	/**
	 * MD5加密字符串
	 * @param src
	 * @return
	 */
	public static String encodeMD5(String src) {
		MessageDigest messageDigest = null; 
		StringBuffer md5StrBuff = new StringBuffer();
        
        try {
			messageDigest = MessageDigest.getInstance("MD5");   
			messageDigest.reset();  
			messageDigest.update(src.getBytes("UTF-8"));       
  
			byte[] byteArray = messageDigest.digest();  
			for (int i = 0; i < byteArray.length; i++) {              
			    if (Integer.toHexString(0xFF & byteArray[i]).length() == 1)  
			        md5StrBuff.append("0").append(Integer.toHexString(0xFF & byteArray[i]));  
			    else  
			        md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));  
			}
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} 
        
        return md5StrBuff.toString();
	}

	/*
	 * 将字符串进行URL编码，例如汉字和空格等的使用
	 * 对特殊字符如"、"等不能正确编码，请使用CharUtil.Utf8URLencode()
	 */
	public static String enCodeURL(String url, String code) {
		Pattern pattern = Pattern.compile("[\u300a\u300b]|[\u4e00-\u9fa5]|[\uFF00-\uFFEF]", Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
		Matcher m = pattern.matcher(url);
		if (m.find()) {
			int get = m.start();
			String suburl = url.charAt(get) + "";
			String encodesuburl = "";
			try {
				encodesuburl = URLEncoder.encode(suburl, code);
			} catch (Exception e) {}
			url = url.replaceAll(suburl, encodesuburl);
			url = enCodeURL(url, code);
		}
		url = url.replaceAll(" ", "20%");
		return url;
	}

	/**
	 * 根据格式输出日期字符串 
	 * @param format 完整格式 yyyy-mm-dd hh:mi:ss
	 * @param value
	 * @return
	 */
	public static String getDateByFormat(String format, String value) {
		if (StringUtil.isBlank(format) || StringUtil.isBlank(value) || value.length() < 4) return "";
		
		//yyyy-mm-dd hh:mi:ss
		if (value.length() >= 4) format = format.replace("yyyy", value.substring(0, 4));
		if (value.length() >= 7) format = format.replace("mm", value.substring(5, 7));
		if (value.length() >= 10) format = format.replace("dd", value.substring(8, 10));
		if (value.length() >= 13) format = format.replace("hh", value.substring(11, 13));
		if (value.length() >= 16) format = format.replace("mi", value.substring(14, 16));
		if (value.length() >= 19) format = format.replace("ss", value.substring(17, 19));
		
		format = format.replaceAll("[a-zA-Z]", "0");	//把字母替换成0
		
		return format;
	}

	/**
	 * 获得UUID唯一标识串
	 * @return
	 */
	public static String getUUID() {
		return UUID.randomUUID().toString();
	}

	/**
	 * 检查是否为空白字符串，NULL，长度为0，空格等
	 */
	public static boolean isBlank(String str) {
		if( str==null ) return true;	
		int strLen = str.length();
		if ( strLen <1 ) return true;
		for (int i = 0; i < strLen; i++)
			if ((Character.isWhitespace(str.charAt(i)) == false)) return false;
		return true;
	}

	/**
	 * <p>
	 * 检查字符串是否为空
	 * </p>
	 */
	public static boolean isEmpty(String str) {
		return str == null || str.length() == 0;
	}

	/*
	 * 是否是数字类型
	 */
	public static boolean isNumeric(String str) {
		if (str == null) return false;

		int sz = str.length();
		for (int i = 0; i < sz; i++)
			if (Character.isDigit(str.charAt(i)) == false) return false;
		return true;
	}


	/**
	 * 删除字符串中的空白字符
	 * 
	 * @param src
	 * @return
	 */
	public static String removeBlank(String src){
		if( src==null ) return null;
		StringBuilder s = new StringBuilder();
		char[] text = src.toCharArray();
		for (int i = 0; i < text.length; i++)
			if (!Character.isWhitespace(text[i])) s.append(text[i]);
		return s.toString();
	}
	
	

	/**
	 * 用指定的字符来替换空白字符
	 * 
	 * @param src
	 * @param ch
	 * @return
	 */
	public static String replaceBlank(String src, char ch ){
		if (src == null) return null;
		char[] text = src.toCharArray();
		for (int i = 0; i < text.length; i++)
			if (Character.isWhitespace(text[i])) text[i] = ch;
		return String.copyValueOf(text);
	}
	
	/**
	 * 根据分隔字符来分隔字符串到字符串数组
	 * @param text
	 * @param split
	 * @return
	 */
	public static String[] split(String text,String split){
		if(isBlank(text)) return new String[]{};
		return text.split(split);
	}
	/**
	 * 拆分字符串，并忽略掉其中的空白内容
	 * @param text
	 * @param split
	 * @return
	 */
	public static String[] splitExcludeBlank( String text,String split ){
		if(isBlank(text)) return new String[]{};
		List<String> list = new ArrayList<String>();
		for( String o : text.split(split) )
			if( !StringUtil.isBlank(o) ) list.add(o.trim());
		String[] result = new String[list.size()];
		return list.toArray(result);
	}
	
	/**
	 * 切分为数组。
	 * @param fieldValue
	 * @param string
	 * @return
	 */
	public static List<String> split2List(String fieldValue, String filterStr) {
		final ArrayList<String> rets = new ArrayList<String>();
		split2List(fieldValue,filterStr,rets);
		return rets;
	}
	
	/**
	 * 按照分隔符号填充到某一个列表中
	 * @param text
	 * @param split
	 * @param list
	 */
	public static void split2List(String text,String split,List<String>list){
		if(StringUtil.isBlank(text)) return;
		for( String o : text.split(split)) list.add( o );
	}

	/**
	 * 将"1:xxx,2:ppp,3:ddd"这样的定义转换为“KEY-VALUE”的列表
	 * @param src
	 * @return
	 */
	public static Map<String,String> split2Map( String src ){
		Map<String,String> m = new HashMap<String,String>();
		if(src==null) return m;
		for( String o : src.split(",") ){
			if(StringUtil.isBlank(o)) continue;
			String[] item = o.split(":");
			String key = item[0].trim();
			String value = key;
			if( item.length>1 ) value = item[1].trim();
			if( key.length()<1 ) key = value;
			m.put(key, value);
		}
		return m;
	}
	/**
	 * 分割字符串：split2Map("1=abc,2=cdx",",","=") =  {[1:abc],[2:cdx]}
	 * @param src
	 * @param itemChar
	 * @param keyChar
	 * @param iter
	 */
	public static void split( String src, String itemChar,String keyChar,ILoopIterator<Parameter<String,String>> iter ){
		for( String o : src.split(itemChar) ){
			if(StringUtil.isBlank(o)) continue;
			String[] item = o.split(keyChar);
			String key = item[0].trim();
			String value = key;
			if( item.length>1 ) value = item[1].trim();
			if( key.length()<1 ) key = value;
			iter.process(new Parameter<String,String>(key,value), -1);
		}
	}	
	/**
	 * 将字符分割为MAP
	 * 例如：split2Map("1=abc,2=cdx",",","=") =  {[1:abc],[2:cdx]}
	 * @param src
	 * @param itemChar
	 * @param keyChar
	 * @return
	 */
	public static Map<String,String> split2Map( String src, String itemChar,String keyChar ){
		Map<String,String> m = new HashMap<String,String>();
		if(src==null) return m;
		for( String o : src.split(itemChar) ){
			if(StringUtil.isBlank(o)) continue;
			String[] item = o.split(keyChar);
			String key = item[0].trim();
			String value = key;
			if( item.length>1 ) value = item[1].trim();
			if( key.length()<1 ) key = value;
			m.put(key, value);
		}
		return m;
	}
	

	/**
	 * 将"1:xxx,2:ppp,3:ddd"这样的定义转换为“KEY-VALUE”的列表
	 * @param src
	 * @return
	 */
	public static List<Parameter<String,String>> split2ParameterMap( String src ){
		List<Parameter<String,String>> p = new ArrayList<Parameter<String,String>>();
		if( src==null ) return p;
		for( String o : src.split(",") ){
			if(StringUtil.isBlank(o)) continue;
			String[] item = o.split(":");
			String key = item[0].trim();
			String value = key;
			if( item.length>1 ) value = item[1].trim();
			if( key.length()<1 ) key = value;
			p.add( new Parameter<String,String>(key,value) );
		}
		return p;
	}

	public static boolean toBoolean(String str, boolean defvalue) {
		if (isBlank(str)) return defvalue;
		if (str.trim().compareToIgnoreCase("true") == 0) return true;
		else if (str.trim().compareToIgnoreCase("false") == 0) return false;
		return defvalue;
	}

	/* 转换为对应的CLASS */
	public static Class<?> toClass(String o) throws CommonException {
		try {
			return Class.forName(o);
		} catch (ClassNotFoundException e) {
			throw new CommonException("类" + o + "不存在或者非法，没有被实现，无法构造");
		}
	}

	/** 
	 * 返回类，如果不存在用默认类替代
	 * @param <T>
	 * @param o
	 * @param def
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static <T> Class<T> toClass(String o,Class<T> def)  {
		try {
			return (Class<T>) Class.forName(o);
		} catch (Exception e) {
			return def;
		}
	}
	
	/* 转换为对应的CLASS */
	@SuppressWarnings("unchecked")
	public static <T> Class<T> toClass1(String o) throws CommonException {
		try {
			return (Class<T>) Class.forName(o);
		} catch (ClassNotFoundException e) {
			//e.printStackTrace();
			throw new CommonException("类" + o + "不存在或者非法，没有被实现，无法构造");
		}
	}
	
	/* 自动匹配日期格式 */
	public static Date toDate(String str, Date defval) {
		try {
			if (isBlank(str)) return defval;
			
			StringBuilder tmp = new StringBuilder();
			for (int i = 0; i < str.length(); i++) {
				char c = str.charAt(i);
				if (c >= '0' && c <= '9') tmp.append(c);
			}
			String val = tmp.toString();
			int ilen = val.length();
			String format = null;
			if (ilen == 4) format = "MMdd";
			else if (ilen == 8) format = "yyyyMMdd";
			else if (ilen == 10) format = "yyyyMMddHH";
			else if (ilen == 12) format = "yyyyMMddHHmm";
			else if (ilen == 14) format = "yyyyMMddHHmmss";
			else format = "yyyyMMdd"; //非正常长度分析到day

			return toDate(val, format, defval);
		} catch (Throwable e) {
			return defval;
		}
	}

	/* 根据格式转换为Date类型 */
	public static Date toDate(String str, String format, Date defval) {
		try {
			SimpleDateFormat dateFormat = new SimpleDateFormat(format);
			return dateFormat.parse(str);
		} catch (ParseException e) {
			return defval;
		}
	}

	public static double toDouble(String str, double defval) {
		try {
			return Double.valueOf(str);
		} catch (Throwable e) {
			return defval;
		}
	}
	public static float toFloat(String str, float defval) {
		try {
			return Float.valueOf(str);
		} catch (Throwable e) {
			return defval;
		}
	}
 
	// ================================================
	// 将字符串转换为其他类型
	/**
	 * 转换为整形数
	 * 
	 * @param str
	 * @param defValue
	 * @return
	 */
	public static int toInt(String str, int defValue) {
		if (str == null) return defValue;
		try {
			return Integer.valueOf(str);
		} catch (Throwable e) {
			return defValue;
		}
	}
	
	public static long toLong(String str, long defval) {
		try {
			return Long.valueOf(str);
		} catch (Throwable e) {
			return defval;
		}
	}

	public static short toShort(String str, short defval) {
		try {
			return Short.valueOf(str);
		} catch (Throwable e) {
			return defval;
		}
	}
	
	/**
	 * 将字符串转化为SQL的in( ... )中的使用的字符串
	 * @param ids
	 * @param quote			是否需要用'包含起来声明为字符串
	 */
	public static String toSqlInCase(List<String> ids, boolean quote) {
		StringBuilder sb = new StringBuilder();
		
		for( String o : ids ){
			if( o==null ) continue;
			sb.append(",").append(quote?"'":"").append(o).append(quote?"'":"");
		}
		if( sb.length()>1 ) sb.deleteCharAt(0);
		
		return sb.toString();
	}
	/**
	 * 将字符串转化为SQL的in( ... )中的使用的字符串
	 * @param ids
	 * @param quote			是否需要用'包含起来声明为字符串
	 */
	public static String toSqlInCase(Set<String> ids, boolean quote) {
		StringBuilder sb = new StringBuilder();
		
		for( String o : ids ){
			if( o==null ) continue;
			sb.append(",").append(quote?"'":"").append(o).append(quote?"'":"");
		}
		if( sb.length()>1 ) sb.deleteCharAt(0);
		
		return sb.toString();
	}
	/**
	 * 清楚空白字符，加了空串的判断
	 * 
	 * @param str
	 * @return
	 */
	public static String trim(String str) {
		return str == null ? null : str.trim();
	}

	/**
	 * 清除头尾空白字符，如果字符串为null则自动用指定的默认字符串替代
	 * 
	 * @param str 要处理的字符串
	 * @param def 默认的字符串
	 * @return
	 */
	public static String trim(String str, String def) {
		return str == null ? def : str.trim();
	}
	/**
	 * 清除头尾空白字符，如果字符串为null则自动用空白字符串替代
	 * 
	 * @param str
	 * @return
	 */
	public static String trimToEmpty(String str) {
		return str == null ? EMPTY : str.trim();
	}
	/**
	 * 将字符串转化为特定类型的值，除了日期以外
	 * @param s
	 * @param type
	 * @return
	 */
	public static final Object stringToType(String s,Class<?> type){
		if(type==Integer.class){
			return Integer.valueOf(s);
		}else if(type==int.class){
			return Integer.parseInt(s);
		}else if(type==Long.class){
			return Long.valueOf(s);
		}else if(type==long.class){
			return Long.parseLong(s);
		}else if(type==Double.class){
			return Double.valueOf(s);
		}else if(type==double.class){
			return Double.parseDouble(s);
		}else if(type==Float.class){
			return Float.valueOf(s);
		}else if(type==float.class){
			return Float.parseFloat(s);
		}else if(type==Character.class){
			return Character.valueOf(s.charAt(0));
		}else if(type==char.class){
			return s.charAt(0);
		}else{
			return s;
		}
	}
	
	/**
	 * 将数组转化成字符串
	 * @param list
	 * @param split 分隔符
	 * @param quote 是否加单引号
	 * @return
	 */
	public static String join(Object[] list, String split, boolean quote) {
		if (list == null) return "";
		if (split == null) split = "";
		StringBuilder sb = new StringBuilder();
		for (int i=0; i<list.length; i++) {
			if (i > 0) sb.append(split);
			if (quote) sb.append("'");
			sb.append(list[i].toString());
			if (quote) sb.append("'");
		}
		return sb.toString();
	}
	
	/**
	 * 合并集合成一个数组
	 * @param set
	 * @param split
	 * @param quote
	 * @return
	 */
	public static String join(Set<String> set,String split,boolean quote ){
		if( set==null || set.size()<1 ) return "";
		StringBuilder sb = new StringBuilder();
		for( String o : set )
			sb.append( sb.length()>1?",":"").append(o);
		return sb.toString();
	}

	private StringUtil() {} /* 工具类不允许实例化 */
	
	
	
}
