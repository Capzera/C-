/**
 * 项目名称：RapidWeb2快速开发平台基础框架
 * 版权申明：RapidWeb2项目组，未经许可不得在任何软件中以任何形式使用全部或部分代码，不得更改本项目的代码。
 * 文件名称：StringConverter.java
 * 创建时间：2010-12-3-上午10:56:55
 * 创建用户：chis(chis123@qq.com)
 * 文件描述：
 * 修改记录：
 *   
 */
package com.rapidweb2.common.util.convert;

import java.lang.reflect.Constructor;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

/**
 * 字符串转换器
 * 
 * @author chis(chis123@qq.com)
 * 
 */
public class StringConverter {
	private static final Map<Class<?>, Class<?>>				PRIMITIVES;
	static {
		PRIMITIVES = new HashMap<Class<?>, Class<?>>();
		PRIMITIVES.put(int.class, Integer.class);
		PRIMITIVES.put(double.class, Double.class);
		PRIMITIVES.put(float.class, Float.class);
		PRIMITIVES.put(short.class, Short.class);
		PRIMITIVES.put(byte.class, Byte.class);
		PRIMITIVES.put(long.class, Long.class);
	}

	/**
	 * 根据需要，将字符串类型转为对应类型的对象
	 * @param v
	 * @param target
	 * @return
	 */
	public static Object toObject(String v, Class<?> target) {
		Object tv = null;
		if(v == null) return null;
		
		// 如果是字符串兼容类型
		if(target.isAssignableFrom(String.class)) return target.cast(v);

		// 日期类型的处理
		if(target.isAssignableFrom(java.util.Date.class)) {
			java.text.DateFormat df = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			try {
				return df.parse(v);
			} catch(ParseException e) {
				df = new java.text.SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
				try {
					return df.parse(v);
				} catch(ParseException e1) {
					df = new java.text.SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");
					try {
						return df.parse(v);
					} catch(ParseException e2) {
						throw new IllegalArgumentException(String.format("无法将字符串%s转换为日期类型", v));
					}
				}
			}
		}
		// 布尔值的处理
		if(Boolean.class.equals(target) || boolean.class.equals(target)) return target.cast(getBooleanValue(v));
		// 尝试使用valueOf方法
		tv = getTypeViaValueOfMethod(v, target);
		// 尝试使用带一个字符串类型的构造函数，例如：public T(String source)
		if( tv==null ) tv = StringConverter.getTypeViaStringConstructor(v, target);
		// 返回吧
		return tv;
	}

	@SuppressWarnings("unchecked")
	public static <T> T to(String v, Class<T> clz) {
		return (T)toObject(v,clz);
	}

	/**
	 * 反射调用该类型的valueOf
	 * @param <T>
	 * @param source
	 * @param targetType
	 * @return
	 */
	@SuppressWarnings("unchecked")
	private static <T extends Object> T getTypeViaValueOfMethod(final String source, final Class<T> targetType) {
		Class<?> actualTarget = targetType;
		if(targetType.isPrimitive()) 	actualTarget = PRIMITIVES.get(targetType);
		T result = null;
		try {
			java.lang.reflect.Method valueOf = actualTarget.getDeclaredMethod("valueOf", String.class);
			Object value = valueOf.invoke(null, source);
			if(actualTarget.equals(targetType) && targetType.isInstance(value)) 
				result = targetType.cast(value);
			else if(!actualTarget.equals(targetType) && actualTarget.isInstance(value)) 
				result = (T) value;
		} catch(Throwable e) {
			return null;
		}

		return result;
	}

	/**
	 * 解析字符串为布尔值
	 * @param source
	 * @return
	 */
	public static Boolean getBooleanValue(final String source) {
		if("Y".equalsIgnoreCase(source) || "T".equalsIgnoreCase(source) || "Yes".equalsIgnoreCase(source) || "1".equalsIgnoreCase(source)) {
			return Boolean.TRUE;
		} else if("N".equals(source) || "F".equals(source) || "No".equals(source) || "0".equalsIgnoreCase(source)) { return Boolean.FALSE; }
		return Boolean.valueOf(source);
	}

	/**
	 * 调用单参数的构造函数来处理
	 * @param <T>
	 * @param source
	 * @param targetType
	 * @return
	 */
	private static <T> T getTypeViaStringConstructor(String source, Class<T> targetType) {
		T result = null;
		Constructor<T> c = null;

		try {
			c = targetType.getDeclaredConstructor(String.class);
			result = c.newInstance(source);
		} catch(Throwable e) {}
		return result;
	}

}
