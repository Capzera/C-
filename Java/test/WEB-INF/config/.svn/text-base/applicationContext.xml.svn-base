<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"	
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/jdbc  
		http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/aop 
    	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd     		
    	http://www.springframework.org/schema/context 
    	http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
	<!-- 注册SPRING工具类，用来获得Application容器  -->
	<bean class="com.rapidweb2.spring.SpringUtil" />
	<!-- 注册WEB容器工具类，用来获得WEB容器对象 -->
	<bean class="com.rapidweb2.spring.mvc.ServletContextUtil" />
	
		
	<!-- 读取配置文件，id、class都是固定的 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>/WEB-INF/config/system.properties</value>
		</property>
	</bean>

	<!-- 数据源 -->
	<bean id="dataSource"  class="org.logicalcobwebs.proxool.ProxoolDataSource" >  
        <property name="driver" value="${jdbc.driver}" />  
        <property name="driverUrl" value="${jdbc.url}" />  
        <property name="user" value="${jdbc.username}"/>  
        <property name="password" value="${jdbc.password}"/>  
        <property name="alias" value="Pool_ORCL"/>  
        <property name="maximumActiveTime" value="30000"/>  
        <property name="prototypeCount" value="0"/>  
        <property name="maximumConnectionCount" value="${jdbc.pool.maxsize}"/>  
        <property name="minimumConnectionCount" value="${jdbc.pool.minsize}"/>  
        <property name="simultaneousBuildThrottle" value="50"/>  
        <property name="houseKeepingTestSql" value="${jdbc.pool.activesql}"/>  
   	</bean>
   	
   	<bean id="blogConfig" class="com.sanxine.blog.entity.BlogConfig">
   	    <property name="HOT_BLOGS" value="${HOT_BLOGS}"/>
   	    <property name="NEST_BLOGS" value="${NEWEST_BLOGS}"/>
   	</bean> 
   	
   	<bean id="activityIndexConfig" class="com.sanxine.activity.entity.ActivityIndexConfig">
   	    <property name="HOT_ACTIVITY" value="${HOT_ACTIVITY}"/>
   	    <property name="NEWEWT_ACTIVITY" value="${NEWEWT_ACTIVITY}"/>
   	</bean> 
   	
   	<bean id="mailSenderInfo" class="com.sanxine.email.entity.MailSenderInfo">
   	    <property name="mailServerHost" value="${EMAIL_SERVER_HOSET}"/>
   	    <property name="mailServerPort" value="${SERVER_HOSET_PORT}"/>
   	</bean>
   	
	
	<!--  定义JdbcTemplate的实例 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- 使用BeanMapper需要的配置两个控制类  -->
    <bean id="beanQuery" class="com.rapidweb2.spring.beanmapper.BeanQuery" scope="prototype">
    	<property name="jdbcTemplate" ref="jdbcTemplate" />
    </bean>
	<bean id="beanUpdate" class="com.rapidweb2.spring.beanmapper.BeanUpdate" scope="prototype">
    	<property name="jdbcTemplate" ref="jdbcTemplate" />
    </bean>
	
	<!-- 相册应用所需要的配置信息 -->
	<bean id="snsPhotoConfig" class="com.sanxine.sns.application.photo.config.SnsPhotoConfig">
		<!-- 服务器存放图片的目录 -->
    	<property name="serverAddr" value="" />
    	<!-- Album目录名称 -->
    	<property name="albumDir" value="/album/" />
    	<!-- 图片上传的格式限制 -->
    	<property name="photoFileExt" value="jpeg,gif,jpg,png" />
    	<!-- 每页显示相册数 -->
    	<property name="albumRaws" value="6" />
    	<!-- 每页显示图片 -->
    	<property name="photoRaws" value="8" />
    	<!-- 图片文件大小限制 -->
    	<property name="photoMaxSize" value="2" />
    	<!-- 批量上传一次最多上传图片数 -->
    	<property name="maxFlashUploadNum" value="10" />
    </bean>
	
	
	<!-- SNS的动态获取配置 -->
	<bean id="feedfactory" class="com.sanxine.feed.FeedFactory">
		<property name="getters">
			<props>
				<prop key="com.sanxine.sys.entity.SysUser">com.sanxine.feed.SysUserFeed</prop>
				<prop key="com.sanxine.sns.entity.SnsMember">com.sanxine.feed.SnsMemberFeed</prop>
				<prop key="com.sanxine.sns.application.photo.entity.SnsAlbum">com.sanxine.feed.SnsAlbumFeed</prop>
				<prop key="com.sanxine.blog.entity.SnsLog">com.sanxine.feed.SnsLogFeed</prop>
				<prop key="com.sanxine.sns.application.share.entity.SnsShare">com.sanxine.feed.SnsShareFeed</prop>
				<prop key="com.sanxine.sns.application.twriter.entrty.SnsTwriter">com.sanxine.feed.SnsTtwriterFeed</prop>
				<prop key="com.sanxine.sns.application.app.entity.SnsLeaveMessage">com.sanxine.feed.SnsWallFeed</prop>
				<prop key="com.sanxine.sns.application.vote.entity.VoteInfo">com.sanxine.feed.SnsVoteInfoFeed</prop>
				<prop key="com.sanxine.sns.application.vote.entity.VoteUser">com.sanxine.feed.SnsVoteUserFeed</prop>
				<prop key="com.sanxine.ask.entity.SnsAskReply">com.sanxine.feed.SnsAskReplyFeed</prop>
			</props>
		</property>
	</bean>

 	<!-- log4jdbc -->
 	<bean id="log4jdbcInterceptor" class="net.sf.log4jdbc.DataSourceSpyInterceptor" />
 	<bean id="dataSourceLog4jdbcAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
 		<property name="interceptorNames">
 			<list>
 				<value>log4jdbcInterceptor</value>
 			</list>
 		</property>
 		<property name="beanNames">
 			<list>
 				<value>dataSource</value>
 			</list>
 		</property>
 	</bean>


 	<!-- 事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource" /> 
	</bean> 
	
	<!-- 使用AspectJ方式配置AOP -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<aop:config proxy-target-class="true" />

	<!-- 使用注解方式定义事务 -->
	<tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager" />

	<!-- 配置事务传播特性 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<!--  
			<tx:method name="*" read-only="true" />
			-->
		</tx:attributes>
	</tx:advice>

	<!-- 配置哪些类的哪些方法参与事务 -->
	<aop:config>
		<aop:pointcut id="serviceMethod" expression="execution(* com.sxinfo.shop.service.*.*(..))"/> 		
        <aop:advisor pointcut-ref="serviceMethod" advice-ref="transactionAdvice" order="1"/>
        <!--  
        <aop:aspect id="throwsInterceptor" ref="throwsInterceptor" order="2">
        	<aop:pointcut id="actionMethod" expression=""/>
        	<aop:after-throwing pointcut-ref="actionMethod" method="afterThrowing" throwing="throwable"/>
        </aop:aspect>
        -->
	</aop:config>
	
    <!-- SMTP邮件服务配置 -->
	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.timeout">25000</prop>
				<!-- SSL连接配置 -->
				<!--
				<prop key="mail.smtp.starttls.enable">true</prop>  
				<prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
				-->
			</props>
		</property>
	</bean>
	
	<!-- SMTP邮件异步发送 -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数 -->
		<property name="corePoolSize" value="10" />
		<!-- 最大线程数 -->
		<property name="maxPoolSize" value="50" />
		<!-- 最大队列数 -->
		<property name="queueCapacity" value="10000" />
		<!-- 线程池维护线程所允许的空闲时间 -->
		<property name="keepAliveSeconds" value="60" />
	</bean>

	<!-- 国际化信息 -->  
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:languages/i18n</value>
				<value>classpath:languages/sns</value>
			</list>
		</property>
		<property name="useCodeAsDefaultMessage" value="true" />
	</bean>
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver" />

	<!-- Freemarker属性文件 freemarker.properties -->
	<bean id="freemarkerProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">     
		<property name="location" value="/WEB-INF/config/freemarker.properties"/>     
	</bean>     
	
	<!-- Freemarker配置 -->
	<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
	    <!-- 视图资源位置 -->
	    <property name="templateLoaderPath" value="/template/" />
	    <property name="defaultEncoding" value="UTF-8" />
	    <!-- 直接将属性写在单独的.properties注入进来 -->
		<property name="freemarkerSettings" ref="freemarkerProperties"/>  
		<!-- 全局变量部分 -->     
		<property name="freemarkerVariables">
			<map>
				<entry key="@COMPANYNAME" value="" />   
 			</map>     
		</property>   
	</bean>
	
	<!-- 自动扫服务类 -->
	<!--  
	<context:component-scan base-package="com.sxinfo.*.service$"/>
	<context:component-scan base-package="com.sxinfo.*.dao$"/>
	-->
	
	<context:component-scan base-package="com.sanxine.*.service" />
	<context:component-scan base-package="com.sanxine.sns.application.*.service" />
	
	<!--  
	<import  resource ="services.xml"   />
	-->
	
	
</beans>
