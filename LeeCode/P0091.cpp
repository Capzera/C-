/*
问题描述：P0091
一条包含字母?A-Z 的消息通过以下映射进行了 编码 ：
'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
要解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：
"AAJF" ，将消息分组为 (1 1 10 6)
"KJF" ，将消息分组为 (11 10 6)
注意，消息不能分组为? (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
题目数据保证答案肯定是一个 32 位 的整数。
示例 1：
输入：s = "12"
输出：2
解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
示例 2：
输入：s = "226"
输出：3
解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
示例 3：
输入：s = "0"
输出：0
解释：没有字符映射到以 0 开头的数字。
含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。
提示：
1 <= s.length <= 100
s 只包含数字，并且可能包含前导零。
*/
class Solution {
public:
    int numDecodings(string s) {
        int n=s.size(),i;
        vector<int> dp(n+1);
        if (s[0]=='0') return 0;
        dp[0]=1;
        for(i=1;i<=n;i++)
        {
            if (s[i-1]!='0') dp[i]+=dp[i-1];//当前可解码为1-9中任意一个，解法与前一个相同
            if (i>1)
            {
                int tmp=s[i-1]-48+10*(s[i-2]-48);//前两个数
                if (tmp>9&&tmp<27) dp[i]+=dp[i-2];
            }
        }
        return dp[n];
    }
};
//优化空间
class Solution {
public:
    int numDecodings(string s) {
        int n=s.size(),i,dp=1,predp=1,temp;
        if (s[0]=='0') return 0;
        for(i=1;i<=n;i++)
        {
            temp=dp;
            if (s[i-1]!='0') dp=temp;
            else dp=0;
            if (i>1)
            {
                int tmp=s[i-1]-48+10*(s[i-2]-48);
                if (i>1&&tmp>9&&tmp<27) dp+=predp;
                predp=temp;
            }
        }
        return dp;
    }
};