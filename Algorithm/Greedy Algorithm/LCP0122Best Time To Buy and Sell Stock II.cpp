/*
题目描述：
给定一个数组 prices ，其中?prices[i] 表示股票第 i 天的价格。
在每一天，你可能会决定购买和/或出售股票。你在任何时候?最多?只能持有 一股 股票。你也可以购买它，然后在 同一天 出售。
返回 你能获得的 最大 利润?。
示例 1:
输入: prices = [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
?    随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
示例 2:
输入: prices = [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
?    注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例?3:
输入: prices = [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
*/
class Solution {
public:
    int maxProfit(vector<int>& prices) {//贪心，找到每一组峰谷，计算峰谷差值，将所有峰谷求和即为最大值
        int profit=0,last=0,i,n=prices.size(),high=0;
        if (n==1) return 0;
        for(i=1;i<n;i++)
        {
            if (prices[i]<=prices[high])
            {
                profit+=prices[high]-prices[last];
                last=high=i;
            }
            else high=i;
        }
        profit+=max(0,prices[high]-prices[last]);
        return profit;
    }
};