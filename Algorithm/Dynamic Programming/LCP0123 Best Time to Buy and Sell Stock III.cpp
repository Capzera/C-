/*
问题描述：P0123
给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你最多可以完成?两笔?交易。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
示例?1:
输入：prices = [3,3,5,0,0,3,1,4]
输出：6
解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
?    随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
示例 2：
输入：prices = [1,2,3,4,5]
输出：4
解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 ? 
?    注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。 ? 
?    因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3：
输入：prices = [7,6,4,3,1] 
输出：0 
解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
示例 4：
输入：prices = [1]
输出：0
提示：
1 <=?prices.length <= 105
0 <=?prices[i] <=?105
*/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size(),ans=0;
        vector<vector<vector<int>>> dp(n,vector<vector<int>>(2,vector<int>(3)));
        //dp[i][0][0]表示在第i天时手里没有股票且没有完成交易
        //dp[i][1][0]表示在第i天时手里持有股票且没有完成交易
        //dp[i][0][1]表示在第i天时手里没有股票且完成一次交易
        //dp[i][1][1]表示在第i天时手里持有股票且完成一次交易
        //dp[i][0][2]表示在第i天时手里没有股票且完成二次交易
        dp[0][1][0]=dp[0][1][1]=-prices[0];
        for (int i=1;i<n;i++) {
            dp[i][0][1]=max(dp[i-1][0][1],dp[i-1][1][0]+prices[i]);
            dp[i][0][2]=max(dp[i-1][0][2],dp[i-1][1][1]+prices[i]);
            dp[i][1][0]=max(dp[i-1][1][0],-prices[i]);
            dp[i][1][1]=max(dp[i-1][1][1],dp[i-1][0][1]-prices[i]);
        }
        return max(max(dp[n-1][0][2],dp[n-1][0][1]),0);
    }
};
//由于i只与i-1有关，所以可以拿变量代替数组，优化空间
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int buy1,buy2,sell1,sell2;
        //buy1表示在第i天时手里持有股票且没有完成交易
        //sell1表示在第i天时手里没有股票且完成一次交易
        //buy2表示在第i天时手里持有股票且完成一次交易
        //sell2表示在第i天时手里没有股票且完成二次交易
        buy1=buy2=INT_MIN;
        sell1=sell2=0;
        for (int i:prices) {
            sell1=max(sell1,buy1+i);
            sell2=max(sell2,buy2+i);
            buy1=max(buy1,-i);
            buy2=max(buy2,sell1-i);
        }
        return max(sell1,sell2);
    }
};